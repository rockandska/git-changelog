#!/usr/bin/env bash
set -eEuo pipefail

debug(){
	if ((DEBUG));then
		1>&2 printf 'DEBUG: %s\n' "$@"
	fi
}

set_git_infos() {
	local GIT_ACTUAL_BRANCH
	GIT_ACTUAL_BRANCH="$(git rev-parse --abbrev-ref HEAD 2> /dev/null || true)"
	debug "Actual branch:" "$GIT_ACTUAL_BRANCH"
	# Git commits
	local line
	while IFS='' read -r line; do GIT_ACTUAL_TAGS+=("$line"); done < <(git tag --points-at 2> /dev/null || true)
	debug "Actuals tags :" "${GIT_ACTUAL_TAGS[@]:-}"
	GIT_ACTUAL_TAG="${CHANGELOG_TAG:-${GIT_ACTUAL_TAGS[0]:-}}"
	debug "Actual tag :" "${GIT_ACTUAL_TAG:-}"
	while IFS='' read -r line; do GIT_PREVIOUS_TAGS+=("$line"); done < <(git for-each-ref --merge "${GIT_ACTUAL_BRANCH}" --no-contains=HEAD --sort=-creatordate --format '%(refname)' refs/tags 2> /dev/null | sed 's/refs\/tags\///')
	debug "Previous tags:" "${GIT_PREVIOUS_TAGS[@]}"
	GIT_PREVIOUS_TAG="${GIT_PREVIOUS_TAGS[0]:-}"
	debug "Previous tag:" "${GIT_PREVIOUS_TAG}"
}

set_user_config() {
	local user_conf
	if [ -f "${CONFIG_DIR}/config" ];then
		debug "User config found in ${CONFIG_DIR}, loading it..."
		user_conf=$(<"${CONFIG_DIR}/config")
	fi
	local repo_conf
	if [ -f "${GIT_TOP_LEVEL}/.git-changelog" ];then
		debug "Repo config found in ${GIT_TOP_LEVEL}, loading it..."
		repo_conf=$(<"${GIT_TOP_LEVEL}/.git-changelog")
	fi
	source /dev/stdin <<-EOF
		get_var() {
			local var2get="\${1:-}"
			eval \$(display_var \$var2get)
		}

		display_var() {
			local var2get="\${1:-}"
			
			local -r hash="\${hash:-}"
			local -r tag="\${tag:-}"
			local -r title="\${title:-}"
			local -r "type=\${type:-}"
			local -r "scope=\${scope:-}"

			local show_scope=
			local show_body=
			local header_tpl=('%s\n\n' 'CHANGELOG')
			local release_tpl=('%s\n\n' "\${tag}")
			local unreleased_tpl=('%s\n\n' 'Unreleased')
			local type_tpl=('%s\n\n' "\${type}")
			local scope_tpl=('%s\n\n' "\${scope}")
			local commit_tpl=('- %s (%.7s)\n' "\${title}" "\${hash}")
			declare -A commit_type_traduction
			declare -A commit_scope_traduction
			local conventional_commit_regex="^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\(([[:alnum:]._-]+)\))?(!)?: ([[:print:]]*)"
			local conventional_commit_to_show=("BREAKING_CHANGES" "feat" "fix")
			${user_conf:-}
			${repo_conf:-}
			sed 's/declare .. //' <(grep "=" <(declare -p "\$var2get" 2> /dev/null))
		}
	EOF
}


set_commit_infos() {
	debug "Loop over commits..."
	local commit_infos
	local commit_hash
	local commit_subject
	local commit_body
	local commit_type
	local commit_breaking
	local commit_scope
	local commit_title
	local conventional_commit_regex
	get_var conventional_commit_regex
	local conventional_commit_to_show
	get_var conventional_commit_to_show
	local i=0
	while IFS= read -r -d $'\0' commit_infos; do
		eval "$commit_infos"
		commit_subject="${commit_subject%$'\n'}"
		commit_hash="${commit_hash%$'\n'}"
		commit_body="${commit_body%$'\n'}"
		commit_body="${commit_body%$'\n'}"
		if [[ "${commit_subject}" =~ ${conventional_commit_regex} ]];then
			debug "OK : conventional commit found in subject : '${commit_subject}' (${commit_hash::7})"
			commit_type="${BASH_REMATCH[1]}"
			commit_breaking="${BASH_REMATCH[4]}"
			commit_scope="${BASH_REMATCH[3]}"
			commit_title="${BASH_REMATCH[5]}"
			if [[ -n "${commit_breaking}" ]];then
				debug "OK : BREAKING CHANGE found in title : '${commit_subject}' (${commit_hash::7})"
				commit_type="BREAKING_CHANGES"
			else
				local line
				while IFS='' read -r line; do
					local regex="^BREAKING[ -]CHANGE:"
					if [[ "$line" =~ $regex ]];then
						debug "OK : BREAKING CHANGE found in body : '${commit_body}' (${commit_hash::7})"
						commit_type="BREAKING_CHANGES"
					fi
				done <<<"${commit_body}"
			fi
			# shellcheck disable=SC2076
			if [[ " ${conventional_commit_to_show[*]} " == *" ${commit_type} "* ]]; then
				debug "OK : Commit type '$commit_type' is in \$conventional_commit_to_show"
				COMMIT_HASH[$i]="$commit_hash"
				COMMIT_TITLE[$i]="$commit_title"
				COMMIT_BODY[$i]="$commit_body"
				COMMIT_SCOPE[$i]="${commit_scope:=no scope}"
				COMMIT_TYPE_LIST["$commit_type"]="${COMMIT_TYPE_LIST[$commit_type]:-} $i"
				COMMIT_SCOPE_LIST["$commit_scope"]="${COMMIT_SCOPE_LIST[${commit_scope}]:-} $i"
				((i=i+1))
			else
				debug "WARNING : Commit type '${commit_type}' not in \$CONVENTIONAL_COMMIT_TO_SHOW"
			fi
		else
			debug "WARNING : not a conventional commit with subject	'${commit_subject}' (${commit_hash::7})"
		fi
	done < <(git log -z	--pretty="IFS='' read -d '' -r commit_hash <<EOF ||	true%n%H%nEOF%nIFS='' read -d '' -r commit_subject <<EOF ||	true%n%s%nEOF%nIFS='' read -d	'' -r commit_body <<EOF || true%n%b%nEOF"	${GIT_PREVIOUS_TAG:+${GIT_PREVIOUS_TAG}..HEAD} 2>/dev/null)
}

set_changelog_release() {
	debug "Writing changelog.."
	local tag="${GIT_ACTUAL_TAG}"
	local show_scope
	get_var show_scope
	local show_body
	get_var show_body
	local unreleased_tpl
	get_var unreleased_tpl
	local release_tpl
	get_var release_tpl
	declare -A commit_type_traduction
	get_var commit_type_traduction
	declare -A commit_scope_traduction
	get_var commit_scope_traduction
	local conventional_commit_to_show
	get_var conventional_commit_to_show
	if [[ -n "${tag:-}" ]];then
		# shellcheck disable=SC2059,SC2154
		printf -v output -- "${output:-}## ${release_tpl[0]}" "${release_tpl[@]:1}"
	else
		# shellcheck disable=SC2059,SC2154
		printf -v output -- "${output:-}## ${unreleased_tpl[0]}" "${unreleased_tpl[@]:1}"
	fi

	local type
	for type in "${conventional_commit_to_show[@]}";do
		debug "Processing commit type: $type"
		if [[ -n "${COMMIT_TYPE_LIST[$type]:-}" ]];then
			local commit_list
			IFS=" " read -r -a commit_list <<< "${COMMIT_TYPE_LIST[$type]}"
			debug "commits with type : $type" "${commit_list[@]}"
			# traduction
			type="${commit_type_traduction["$type"]:-$type}"
			local type_tpl
			get_var type_tpl
			# shellcheck disable=SC2059,SC2154
			printf -v output -- "${output}### ${type_tpl[0]}" "${type_tpl[@]:1}"
			if [ -n "${show_scope}" ];then
				while IFS= read -r scope;do
					local scope_commits=()
					for commit in "${commit_list[@]}";do
						if [[ " ${COMMIT_SCOPE_LIST["$scope"]} " == *" ${commit} "* ]];then
							scope_commits+=("$commit")
						fi
					done
					debug "commits with scope : $scope" "${scope_commits[@]}"
					if [ "${#scope_commits[@]}" -gt 0 ];then
						# traduction
						scope="${commit_scope_traduction["$scope"]:-$scope}"
						get_var scope_tpl
						# shellcheck disable=SC2059,SC2154
						printf -v output -- "${output}#### ${scope_tpl[0]}" "${scope_tpl[@]:1}"
						set_changelog_release_commits "${scope_commits[@]}"
					fi
				done < <(printf '%s\n' "${!COMMIT_SCOPE_LIST[@]}" | LC_ALL=C sort)
			else
				set_changelog_release_commits "${commit_list[@]}"
			fi
		else
			debug "No commit found with type : ${type}"
		fi
	done
}

set_changelog_release_commits() {
	commits=("$@")
	declare -A commit_scope_traduction
	get_var commit_scope_traduction
	local show_body
	get_var show_body show_body
	local i
	for i in "${commits[@]}";do
		local hash="${COMMIT_HASH[$i]}"
		debug "commit : ${hash}"
		local title="${COMMIT_TITLE[$i]}"
		debug "commit title : ${title}"
		local scope="${commit_scope_traduction["${COMMIT_SCOPE[$i]}"]:-${COMMIT_SCOPE[$i]}}"
		debug "commit scope : ${scope}"
		get_var commit_tpl
		# shellcheck disable=SC2059,SC2154
		printf -v output -- "${output}${commit_tpl[0]}" "${commit_tpl[@]:1}"
		if [ -n "${show_body}" ] && [ -n "${COMMIT_BODY[$i]}" ];then
			# shellcheck disable=SC2016,SC2001
			printf -v output -- "${output}"'  ```\n%s\n  ```\n' "$(echo	"${COMMIT_BODY[$i]}" | sed 's/^/  /g')"
		fi
	done
	# shellcheck disable=SC2059
	printf -v output -- "${output}\n"
}

update_changelog() {
	local tag="${GIT_ACTUAL_TAG}"
	# Used with sed to delete old section in CHANGELOG
	local escaped_header
	local escaped_release
	local escaped_unreleased
	local changelog_cleaned

	local header_tpl
	get_var header_tpl
	# shellcheck disable=SC2059
	escaped_header=$(printf -- "${header_tpl[0]:-}" "${header_tpl[@]:1}" | sed	's/[.[\/\*^$]/\\&/g')

	local release_tpl
	get_var release_tpl
	# shellcheck disable=SC2059
	escaped_release=$(printf -- "${release_tpl[0]:-}" "${release_tpl[@]:1}" | sed	's/[.[\/\*^$]/\\&/g')

	local unreleased_tpl
	get_var unreleased_tpl
	# shellcheck disable=SC2059
	escaped_unreleased=$(printf -- "${unreleased_tpl[0]:-}" "${unreleased_tpl[@]:1}" |	sed	's/[.[\/\*^$]/\\&/g')

	touch "${CHANGELOG_PATH}"

	# header
	local line
	while IFS= read -r line;do
		changelog_cleaned+=( "$line" )
	done < <(
		# shellcheck disable=SC2059
		printf -- "# ${header_tpl[0]}" "${header_tpl[@]:1}" \
		&& printf '\0'
	)

	# new
	while IFS= read -r line;do
		changelog_cleaned+=( "$line" )
	done < <(
		printf '%s' "$output" \
		&& printf '\0'
	)

	if ((PRINT));then
		printf '%s\n' "${changelog_cleaned[@]}"
		return
	fi

	# old
	while IFS= read -r line;do
		changelog_cleaned+=( "$line" )
	done < <(
		sed \
			-e '$a## ' "${CHANGELOG_PATH}" | \
		sed \
			-e "/^# ${escaped_header}$/,/^## /{//!d}" \
			-e "/^# ${escaped_header}$/d" \
			-e "/^## ${escaped_unreleased}$/,/^## /{//!d};" \
			-e "/^## ${escaped_unreleased}$/d"  \
			-e "/^## ${escaped_release}$/,/^## /{//!d};" \
			-e "/^## ${escaped_release}$/d"  \
			-e '${/^## $/d;}' \
			&& printf '\0'
	)

	if ! diff <(printf '%s\n' "${changelog_cleaned[@]}") "${CHANGELOG_PATH}" > /dev/null 2>&1;then
		printf '%s\n' "${changelog_cleaned[@]}" > "${CHANGELOG_PATH}"
		1>&2 echo "${CHANGELOG_PATH} updated !"
	else
		1>&2 echo "${CHANGELOG_PATH} is already up to date !"
	fi

}

show_help() {
	cat <<-EOF
	git-changelog

	Usage:

	git-changelog [(-h|-?)] [-v] [(-n|--next-tag) <TAG>] [-p]

	Options:
	  -v, --verbose     Increase verbosity (could be repeat)
	  -n, --next-tag    Set tag for release generation (env: CHANGELOG_TAG)
	  -p, --print       Don't update CHANGELOG, just print section generated
	  -h, -?            Show this help
	EOF
}

parse_args() {
while :; do
	case ${1:-} in
		-h|-\?)
			show_help
			exit
			;;
		-n|--next-tag)
			if [ "$2" ]; then
				CHANGELOG_TAG=$2
				shift
			else
				echo 1>&2 'ERROR: "--next-tag" requires a non-empty option argument.'
				exit 1
			fi
			;;
		--next-tag=?*)
			CHANGELOG_TAG=${1#*=}
			;;
		--next-tag=)
			1>&2 'ERROR: "--next-tag" requires a non-empty option argument.'
			exit 1
			;;
		-p|--print)
			PRINT=1
			;;
		-v|--verbose)
			DEBUG=$((DEBUG + 1))
			if [[ "$DEBUG" -ge 2 ]];then
				set -x
			fi
			;;
		--)
			shift
			break
			;;
		-?*)
			1>&2 printf 'ERROR: Unknown option : %s\n' "$1"
			exit 1
			;;
		*)
			break
	esac

	shift
done
}

git-changelog() {
	DEBUG=0
	PRINT=0
	parse_args "$@"

	# Program related
	local PROGRAM_NAME="git-changelog"
	local CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/${PROGRAM_NAME}"

	# Default CHANGELOG file
	local GIT_TOP_LEVEL
	GIT_TOP_LEVEL=$(git rev-parse --show-toplevel)
	local CHANGELOG_PATH
	CHANGELOG_PATH="${GIT_TOP_LEVEL}/CHANGELOG.md"

	# Git infos
	local GIT_ACTUAL_TAGS
	local GIT_ACTUAL_TAG
	local GIT_PREVIOUS_TAGS
	local GIT_PREVIOUS_TAG

	# Commit info
	local COMMIT_HASH=()
	local COMMIT_TITLE=()
	local COMMIT_BODY=()
	local COMMIT_SCOPE=()
	declare -A COMMIT_TYPE_LIST
	declare -A COMMIT_SCOPE_LIST

	set_git_infos
	set_user_config
	set_commit_infos
	if [[ "${#COMMIT_HASH[@]}" -gt 0 ]];then
		set_changelog_release
		update_changelog
	else
		if ! ((PRINT));then
			1>&2 echo "No changes made to ${CHANGELOG_PATH}"
		fi
	fi
}

git-changelog "$@"
